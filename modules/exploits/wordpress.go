package exploits

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"regexp"
	"uscan/modules/content_handling"
	"uscan/modules/handling"

	"github.com/alexeyco/simpletable"
	"github.com/fatih/color"
)

func DetectWordpress(url string, useragent string) bool {
	// Check to make sure URL exists
	if check, checkerr := handling.UrlCheck(url); checkerr != nil {
		handling.ErrCheck(checkerr)
		return false
	} else if !check {
		fmt.Println("This URL does not exist, please provide an existing URL.")
		return false
	}

	// Make request to url, set useragent
	resp, resperr := http.Get(url + "/?author=1")
	resp.Header.Set("User-Agent", useragent)

	contentType := resp.Header.Get("Content-Type")
	contentServer := resp.Header.Get("Server")
	contentPingback := resp.Header.Get("X-Pingback")

	getcontentheaders(contentType, contentServer, contentPingback)

	// Read body
	body, bodyerr := ioutil.ReadAll(resp.Body)
	// Convert body to a string
	sb := string(body)

	// Check all possible errors before continuing.
	handling.ErrCheck(resperr, bodyerr)

	// Look for wordpress version in content
	r, _ := regexp.Compile("WordPress ([0-9].[0-9].[0-9]+)")

	content_handling.UrlHandling(sb)
	if r.FindString(sb) != "" {
		// Run wordpress modules
		LogEvents(url, r.FindString(sb))
		wordpressuser(sb)
		wordpressthemes(sb)
		wordpressplugins(sb)

	} else {
		return false
	}
	return true
}

func wordpressuser(body string) {
	// Regex Wordpress user
	u, _ := regexp.Compile(`author/(\w+)`)

	fmt.Println("Wordpress admin " + color.GreenString(">> ") + u.FindString(body))

}

func wordpressthemes(body string) {
	// Regex wordpress themes, mount to table
	table := simpletable.New()
	table.Header = &simpletable.Header{
		Cells: []*simpletable.Cell{
			{Align: simpletable.AlignCenter, Text: color.GreenString("Wordpress themes")},
		},
	}

	t, _ := regexp.Compile(`themes/(\w+)`)

	themearray := []string{}
	for _, themes := range t.FindAllString(body, -1) {
		themearray = append(themearray, themes)
	}

	dupremove := removeDuplicateStr(themearray)
	for _, nodupthemes := range dupremove {
		r := []*simpletable.Cell{
			{Align: simpletable.AlignCenter, Text: color.WhiteString(nodupthemes)},
		}
		table.Body.Cells = append(table.Body.Cells, r)
	}
	table.SetStyle(simpletable.StyleUnicode)
	fmt.Println(table.String())
}

func wordpressplugins(body string) {
	// Regex wordpress plugins, mount to table
	table := simpletable.New()
	table.Header = &simpletable.Header{
		Cells: []*simpletable.Cell{
			{Align: simpletable.AlignCenter, Text: color.GreenString("Wordpress plugins")},
		},
	}
	w, _ := regexp.Compile(`wp-content/plugins/(\w+)`)

	pluginarray := []string{}
	for _, plugins := range w.FindAllString(body, -1) {
		pluginarray = append(pluginarray, plugins)
	}
	dup_niggerhitter := removeDuplicateStr(pluginarray)
	for _, nodupplugins := range dup_niggerhitter {
		r := []*simpletable.Cell{
			{Align: simpletable.AlignCenter, Text: color.WhiteString(nodupplugins)},
		}
		table.Body.Cells = append(table.Body.Cells, r)
	}
	table.SetStyle(simpletable.StyleUnicode)
	fmt.Println(table.String())
}

func removeDuplicateStr(strSlice []string) []string {
	// Remove list dups
	allKeys := make(map[string]bool)
	list := []string{}
	for _, item := range strSlice {
		if _, value := allKeys[item]; !value {
			allKeys[item] = true
			list = append(list, item)
		}
	}
	return list
}

func getcontentheaders(contentType string, contentServer string, contentPingback string) {

	// Server content headers

	if contentType != "" {
		fmt.Println("ContentType " + color.GreenString(">> ") + contentType)
	}
	if contentServer != "" {
		fmt.Println("ContentServer " + color.GreenString(">> ") + contentServer)
	}
	if contentPingback != "" {
		fmt.Println("ContentPingback " + color.GreenString(">> ") + contentPingback)
	}

}

// Logs found content to console

func LogEvents(url string, wpversion string) {
	// Detect wordpress version
	if wpversion != "WordPress 6.0" {
		fmt.Println("Version " + color.GreenString(">> ") + wpversion + color.YellowString(" (Outdated)"))
	} else {
		wordpressVersion := fmt.Sprintf("Version "+color.GreenString(">>")+" %s \n", wpversion)

		fmt.Printf(wordpressVersion)
	}

}
